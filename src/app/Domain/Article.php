<?php

namespace App\Domain;

use App\ValueObjects\ArticleId;
use App\ValueObjects\ArticleStatus;
use App\Exceptions\ArticleStatusException;
use Carbon\Carbon;
use Illuminate\Contracts\Support\Arrayable;

class Article implements Arrayable
{
    public ArticleId $id;
    public string $title;
    public string $content;
    public ArticleStatus $status;
    public Carbon $createdAt;
    public Carbon $updatedAt;

    private function __construct(
        ArticleId $id,
        string $title,
        string $content,
        ArticleStatus $status,
        Carbon $createdAt,
        Carbon $updatedAt
    ) {
        $this->id = $id;
        $this->title = $title;
        $this->content = $content;
        $this->status = $status;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
    }

    public static function create(string $title, string $content): self
    {
        return new self(
            new ArticleId(null), // ID will be generated by repository
            $title,
            $content,
            ArticleStatus::draft(),
            Carbon::now(),
            Carbon::now()
        );
    }

    public function publish(): void
    {
        if ($this->status->isPublished()) {
            throw new ArticleStatusException("Article is already published.");
        }
        $this->status = ArticleStatus::published();
        $this->updatedAt = Carbon::now();
    }

    public function toArray(): array
    {
        return [
            'id' => $this->id->toInt(),
            'title' => $this->title,
            'content' => $this->content,
            'status' => $this->status->toString(),
            'created_at' => $this->createdAt->toIso8601String(),
            'updated_at' => $this->updatedAt->toIso8601String(),
        ];
    }
}
